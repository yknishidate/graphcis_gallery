---
import ProjectLayout from '../../components/ProjectLayout.astro';
import shaderCode from '../../projects/shaders/gradient.wgsl?raw';
import scriptCode from '../../projects/gradient.js?raw';

// プロジェクト情報
export const projectInfo = {
  title: 'Compute Shader',
  description: 'A demo that uses WebGPU compute shaders to draw a colorful gradient across the canvas.',
  script: '/src/projects/gradient.js',
  date: '2025-03-08',
};

// プロジェクトID
const id = 'gradient';
---

<ProjectLayout
  title={projectInfo.title}
  description={projectInfo.description}
  codeBlocks={[
    {
      name: "Shader",
      code: shaderCode,
      language: "wgsl"
    },
    {
      name: "Script",
      code: scriptCode,
      language: "javascript"
    }
  ]}
>
  <div class="info-section">
    <h2>About This Demo</h2>
    <div>
      <p>
        This demo uses WebGPU compute shaders to draw a colorful gradient across the canvas.
        Compute shaders can utilize the GPU's parallel processing capabilities to perform image processing and calculations at high speed.
      </p>
      <ul>
        <li><strong>Compute Shader</strong>: A program for parallel computation on the GPU. It can perform calculations directly without using the graphics pipeline.</li>
        <li><strong>Storage Texture</strong>: A texture that can be written to from a compute shader. Used to store computation results.</li>
        <li><strong>Workgroup</strong>: The execution unit of a compute shader. The GPU executes many threads in parallel.</li>
      </ul>
      <p>
        In this demo, we calculate a color gradient based on each pixel's position, write the results to a texture, and then display it on the screen.
      </p>
    </div>
  </div>
</ProjectLayout>


<script type="module">
  import { initGradientDemo } from '/src/projects/gradient.js';
  // WebGPUデモの初期化
  async function initDemo() {
    try {
      const canvas = document.getElementById('webgpu-canvas');
      if (!canvas) {
        throw new Error('キャンバス要素が見つかりません。');
      }
      
      // キャンバスのサイズを設定
      const demoContainer = document.querySelector('.demo-container');
      canvas.width = demoContainer.clientWidth;
      canvas.height = 400;
  
      // WebGPUのサポートチェック
      if (!navigator.gpu) {
        throw new Error('WebGPUはこのブラウザでサポートされていません。Chrome 113以降またはその他の対応ブラウザをお使いください。');
      }
  
      // WebGPUがサポートされているか確認
      if (!navigator.gpu) {
        throw new Error('WebGPUはこのブラウザでサポートされていません。');
      }
      
      // アダプタの要求
      const adapter = await navigator.gpu.requestAdapter();
      if (!adapter) {
        throw new Error('WebGPUアダプタが見つかりません。');
      }
      
      // デバイスの要求
      const device = await adapter.requestDevice();
      
      // キャンバスのコンテキストを設定
      const context = canvas.getContext('webgpu');
      const format = navigator.gpu.getPreferredCanvasFormat();
      context.configure({
        device,
        format,
        alphaMode: 'premultiplied',
      });
      
      await initGradientDemo(device, context, canvas, format);
    } catch (error) {
      console.error('エラー:', error);
      
      // エラーメッセージを表示
      const errorElement = document.getElementById('error-message');
      errorElement.textContent = `エラー: ${error.message}`;
      errorElement.style.display = 'block';
      
      // キャンバスを非表示
      const canvas = document.getElementById('webgpu-canvas');
      canvas.style.display = 'none';
    }
  }
  
  // ページ読み込み時にデモを初期化
  document.addEventListener('DOMContentLoaded', initDemo);
</script>
