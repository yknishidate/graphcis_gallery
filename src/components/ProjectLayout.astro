---
import Layout from '../layouts/Layout.astro';

// コードブロックの型定義
export interface CodeBlock {
  name: string;  // タブの名前（例: "Shader", "Compute Shader", "Utility Functions"）
  code: string;  // コードの内容
  language: string;  // コードの言語（"wgsl", "javascript", "glsl"など）
}

// プロジェクトレイアウトのprops
export interface Props {
  title: string;
  description: string;
  id: string;
  scriptPath: string;
  codeBlocks: CodeBlock[];  // 複数のコードブロックを許可
}

const { title, description, id, scriptPath, codeBlocks } = Astro.props;
---

<Layout>
  <div class="container">
    <div class="project-header">
      <h1>{title}</h1>
      <p class="description">{description}</p>
      <a href="/" class="back-link">Back to Home</a>
    </div>

    <div class="demo-container">
      <canvas id="webgpu-canvas"></canvas>
      <div id="error-message" class="error-message"></div>
    </div>

    <div class="code-section">
      <div class="code-tabs">
        <div class="tab-buttons">
          {codeBlocks.map((block, index) => (
            <button 
              class={`tab-button ${index === 0 ? 'active' : ''}`} 
              data-tab={`code-tab-${index}`}
            >
              {block.name}
            </button>
          ))}
        </div>
        <div class="tab-content">
          {codeBlocks.map((block, index) => (
            <div 
              class={`tab-pane ${index === 0 ? 'active' : ''}`} 
              id={`code-tab-${index}`}
            >
              <pre><code class={`language-${block.language}`}>{block.code}</code></pre>
            </div>
          ))}
        </div>
      </div>
    </div>
    
    <!-- スロットを使用して追加のコンテンツを挿入できるようにする -->
    <slot />
  </div>
</Layout>

<!-- Prism.jsのスタイルシートとスクリプトを読み込む -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" />
<script is:inline src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>

<!-- WGSLの言語定義を追加 -->
<script is:inline>
  // WGSLの言語定義（GLSLをベースに拡張）
  Prism.languages.wgsl = {
    'comment': /\/\/.*|\/\*[\s\S]*?\*\//,
    'string': /"[^"]*"/,
    'keyword': /\b(?:var|let|const|fn|return|struct|if|else|loop|break|continue|switch|case|default|for|while|discard|return|true|false|array|vec[234][iuf]?|mat[234]x[234]|sampler|texture|@vertex|@fragment|@compute|@builtin|@location|@group|@binding)\b/,
    'number': /\b(?:0x[\da-f]+|(?:\d+\.?\d*|\.\d+)(?:e[+-]?\d+)?)[iuf]?\b/i,
    'operator': /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
    'punctuation': /[{}[\];(),.:]/
  };
  
  // タブ切り替え処理
  document.addEventListener('DOMContentLoaded', () => {
    Prism.highlightAll();
    
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabPanes = document.querySelectorAll('.tab-pane');
    
    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.getAttribute('data-tab');
        
        // ボタンのアクティブ状態を切り替え
        tabButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        // タブペインのアクティブ状態を切り替え
        tabPanes.forEach(pane => {
          pane.classList.remove('active');
          if (pane.id === tabId) {
            pane.classList.add('active');
          }
        });
      });
    });
  });
</script>

<script define:vars={{ id, scriptPath }}>
// WebGPUデモの初期化
async function initDemo() {
  try {
    const canvas = document.getElementById('webgpu-canvas');
    if (!canvas) {
      throw new Error('キャンバス要素が見つかりません。');
    }
    
    // キャンバスのサイズを設定
    const demoContainer = document.querySelector('.demo-container');
    canvas.width = demoContainer.clientWidth;
    canvas.height = 400;

    // WebGPUのサポートチェック
    if (!navigator.gpu) {
      throw new Error('WebGPUはこのブラウザでサポートされていません。Chrome 113以降またはその他の対応ブラウザをお使いください。');
    }

    // プロジェクト固有のスクリプトを動的にインポート
    const module = await import(scriptPath);
    
    // WebGPUがサポートされているか確認
    if (!navigator.gpu) {
      throw new Error('WebGPUはこのブラウザでサポートされていません。');
    }
    
    // アダプタの要求
    const adapter = await navigator.gpu.requestAdapter();
    if (!adapter) {
      throw new Error('WebGPUアダプタが見つかりません。');
    }
    
    // デバイスの要求
    const device = await adapter.requestDevice();
    
    // キャンバスのコンテキストを設定
    const context = canvas.getContext('webgpu');
    const format = navigator.gpu.getPreferredCanvasFormat();
    context.configure({
      device,
      format,
      alphaMode: 'premultiplied',
    });
    
    // プロジェクトIDに基づいて適切な初期化関数を呼び出す
    if (id === 'triangle') {
      await module.initTriangleDemo(device, context, canvas, format);
    } else if (id === 'gradient') {
      await module.initGradientDemo(device, context, canvas, format);
    } else if (id === 'circles') {
      await module.initCirclesDemo(device, context, canvas, format);
    } else {
      throw new Error(`未知のプロジェクトID: ${id}`);
    }
  } catch (error) {
    console.error('エラー:', error);
    
    // エラーメッセージを表示
    const errorElement = document.getElementById('error-message');
    errorElement.textContent = `エラー: ${error.message}`;
    errorElement.style.display = 'block';
    
    // キャンバスを非表示
    const canvas = document.getElementById('webgpu-canvas');
    canvas.style.display = 'none';
  }
}

// ページ読み込み時にデモを初期化
document.addEventListener('DOMContentLoaded', initDemo);
</script>

<style>
  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  .project-header {
    padding: 2rem 0;
    text-align: center;
  }

  .project-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    background: linear-gradient(to right, var(--accent-color), var(--secondary-color));
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .description {
    font-size: 1.1rem;
    color: #b0b0c0;
    max-width: 700px;
    margin: 0 auto 1.5rem;
    line-height: 1.6;
  }

  .back-link {
    display: inline-block;
    margin-top: 1rem;
    color: var(--accent-color);
    text-decoration: none;
    font-weight: 400;
  }

  .back-link:hover {
    text-decoration: underline;
  }

  .demo-container {
    background-color: rgba(20, 20, 30, 0.5);
    margin: 2rem 0;
    position: relative;
    overflow: hidden;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  #webgpu-canvas {
    width: 100%;
    height: 400px;
    display: block;
    border-radius: 8px;
    background-color: #1e1e2e;
  }

  .error-message {
    display: none;
    background-color: rgba(255, 107, 107, 0.1);
    border-left: 4px solid #ff6b6b;
    padding: 1rem;
    margin: 1rem 0;
    color: #ff6b6b;
    border-radius: 0 8px 8px 0;
  }

  .info-section, .code-section {
    margin: 3rem 0;
  }

  h2 {
    font-size: 1.8rem;
    margin-bottom: 1.5rem;
    color: var(--text-color);
  }

  h3 {
    font-size: 1.3rem;
    margin: 1.5rem 0 1rem;
    color: var(--text-color);
  }

  p {
    margin-bottom: 1rem;
    line-height: 1.6;
    color: #b0b0c0;
  }

  ul {
    margin: 1rem 0;
    padding-left: 1.5rem;
    color: #b0b0c0;
  }

  li {
    margin-bottom: 0.5rem;
    line-height: 1.6;
  }

  pre {
    background-color: rgba(30, 30, 40, 0.7);
    border-radius: 8px;
    padding: 1rem;
    overflow-x: auto;
    margin: 1rem 0;
    /* スクロールバーのスタイリング */
    scrollbar-width: thin; /* Firefox用 */
    scrollbar-color: rgba(60, 60, 70, 0.8) rgba(30, 30, 40, 0.3); /* Firefox用: thumb track */
  }

  /* Webkit（Chrome, Safari, Edge）用のスクロールバースタイル */
  pre::-webkit-scrollbar {
    height: 8px; /* 横スクロールバーの高さ */
  }

  pre::-webkit-scrollbar-track {
    background: rgba(30, 30, 40, 0.3);
    border-radius: 4px;
  }

  pre::-webkit-scrollbar-thumb {
    background-color: rgba(60, 60, 70, 0.8);
    border-radius: 4px;
    border: 2px solid rgba(30, 30, 40, 0.3);
  }

  pre::-webkit-scrollbar-thumb:hover {
    background-color: rgba(80, 80, 90, 0.9);
  }

  code {
    font-family: 'Fira Code', monospace;
    font-size: 0.9rem;
    color: #e0e0e0;
  }

  strong {
    color: var(--accent-color);
    font-weight: 400;
  }

  @media (max-width: 768px) {
    .project-header h1 {
      font-size: 2rem;
    }

    #webgpu-canvas {
      height: 300px;
    }
  }
</style>
